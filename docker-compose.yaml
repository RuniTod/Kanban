version: '3'
services:
#  db:
#    environment:
#      - PGDATA=/var/lib/postgresql/data/pgdata
#      - POSTGRES_PASSWORD=123
#      - POSTGRES_USER=admin
#      - POSTGRES_HOST=localhost
#    labels:
#      description: "Postgresql Database"
#      service: "postgresql"
#    ports:
#      - '5432:5432'
  flask:
    # Путь до Dockerfile
    build: ./kanban
    # Имя для создаваемого контейнера
    container_name: kanban
    # Создание переменных окружения в контейнере
    environment:
      # для отладки (при запуске в релиз убрать!)
      - FLASK_ENV=development
      ## Позволяет отслеживать процесс работы приложения в командной строке
      - PYTHONUNBUFFERED=True
      ##
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=kanban
      - POSTGRES_HOST_AUTH_METHOD=localhost
      - POSTGRES_PORT=5432
    # Перезапускаем сервис в случае падения
    restart: on-failure
    # Прокладывам путь для файлов. Все файлы, которые хранятся у вас в
    # директории ./backend, появятся в директории контейнера /backend
    volumes:
      - ./kanban:/kanban
    # Открываем порт в контейнер
    # Порт, который будет смотреть наружу : порт который используется внутри контейнера
    ports:
      - "5000:5000"
    command: gunicorn app:"create_flask_app()" -b 0.0.0.0:5000 --reload
# gunicorn запускает в файле main.py, функцию create_flask_app по адресу 0.0.0.0:5000